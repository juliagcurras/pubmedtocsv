df <- readRDS(file = paste0(path_to_Tables, i, "/sign_over_infra_genes.rds"))
df <- df[c(1,4,7), c(1, 2, 4)]
rownames(df) <- 1:nrow(df)
df$TipoClr <- rep(i, nrow(df))
return(df)
}, simplify = F)
dfTotal <- dplyr::bind_rows(totales)
dfTotal$`Total de genes comparados` <- as.numeric(dfTotal$`Total de genes comparados`)
dfTotal$`Total de genes significativos` <- as.numeric(dfTotal$`Total de genes significativos`)
dfTotal$Porcentaje <- 100*(dfTotal$`Total de genes significativos`/dfTotal$`Total de genes comparados`)
dfNK <- data.frame(Comparación = c("Grupo 3 - Grupo 2", "Grupo 2 - Grupo 1",
"Grupo 3 - Grupo 1"),
Total1 = c(1405, NA, NA),
Total2 = c(0, NA, NA),
TipoClr = rep("NK-cells", 3),
Porcentaje = c(0, NA, NA)
)
dfTotal$Comparación <- factor(dfTotal$Comparación,
levels = c("Grupo 3 - Grupo 2",
"Grupo 2 - Grupo 1",
"Grupo 3 - Grupo 1"))
dfTotal$TipoClr <- factor(dfTotal$TipoClr,
levels = c(
"Hepatocytes",
"HSCs",
"Endothelial Cells",
"Kupffer Cells",
"T-cells",
"B-cells",
"Monocytes and Macrophages",
"Mo-DCs",
"pDCs",
"Cholangiocytes",
"Neutrophils",
"NK-cells"
), ordered = T)
levels(dfTotal$TipoClr)
sizeLetra <- 9
anguloX <- 35
graficos <- sapply(levels(dfTotal$TipoClr), function(tipo){
df <- dfTotal %>%
dplyr::filter(TipoClr == tipo)
return(ggplot(df, aes(x = Comparación, y = Porcentaje)) +
geom_bar(fill = colorPalette(n=3), stat = "identity") +
geom_text(aes(label = paste0("N = ",`Total de genes significativos`)),
vjust = -0.3) +
theme_minimal() +
theme(
axis.line = ggplot2::element_line(
linewidth = 0.5,
colour = "black"),
axis.ticks = ggplot2::element_line(
linewidth = 0.5,
colour = "black"),
plot.title = ggplot2::element_text(
# size = (sizeLetra + 8),
hjust = 0.5),
# axis.title = ggplot2::element_text(
#   size = (sizeLetra + 4)),
# axis.text = ggplot2::element_text(
#   size = (sizeLetra + 2)),
axis.text.x = ggplot2::element_text(
angle = anguloX, hjust = 1, vjust = 1),
# text = element_text(
#   family = "Calibri",
#   size = sizeLetra),
legend.position = "none") +
ylab("% genes significativos") +
xlab("") +
ylim(0, 2) +
ggtitle(tipo))
}, simplify = F, USE.NAMES = T)
gridExtra::grid.arrange(grobs = graficos, ncol = 3, nrow = 4)
archivos <- list.files(path_to_Tables)
archivos <- archivos[!grepl("\\.ini$", archivos)]
archivos <- archivos[which(archivos != "NK-cells")]
totales <- sapply(archivos, function(i){
df <- readRDS(file = paste0(path_to_Tables, i, "/sign_over_infra_genes.rds"))
df <- df[c(1,4,7), c(1, 2, 4)]
rownames(df) <- 1:nrow(df)
df$TipoClr <- rep(i, nrow(df))
return(df)
}, simplify = F)
dfTotal <- dplyr::bind_rows(totales)
dfTotal$`Total de genes comparados` <- as.numeric(dfTotal$`Total de genes comparados`)
dfTotal$`Total de genes significativos` <- as.numeric(dfTotal$`Total de genes significativos`)
dfTotal$Porcentaje <- 100*(dfTotal$`Total de genes significativos`/dfTotal$`Total de genes comparados`)
dfNK <- data.frame(Comparación = c("Grupo 3 - Grupo 2", "Grupo 2 - Grupo 1",
"Grupo 3 - Grupo 1"),
Total1 = c(1405, NA, NA),
Total2 = c(0, NA, NA),
TipoClr = rep("NK-cells", 3),
Porcentaje = c(0, NA, NA)
)
colnames(dfNK) <- colnames(dfTotal)
dfTotal <- rbind(dfTotal, dfNK)
dfTotal$Comparación <- factor(dfTotal$Comparación,
levels = c("Grupo 3 - Grupo 2",
"Grupo 2 - Grupo 1",
"Grupo 3 - Grupo 1"))
dfTotal$TipoClr <- factor(dfTotal$TipoClr,
levels = c(
"Hepatocytes",
"HSCs",
"Endothelial Cells",
"Kupffer Cells",
"T-cells",
"B-cells",
"Monocytes and Macrophages",
"Mo-DCs",
"pDCs",
"Cholangiocytes",
"Neutrophils",
"NK-cells"
), ordered = T)
levels(dfTotal$TipoClr)
sizeLetra <- 9
anguloX <- 35
graficos <- sapply(levels(dfTotal$TipoClr), function(tipo){
df <- dfTotal %>%
dplyr::filter(TipoClr == tipo)
return(ggplot(df, aes(x = Comparación, y = Porcentaje)) +
geom_bar(fill = colorPalette(n=3), stat = "identity") +
geom_text(aes(label = paste0("N = ",`Total de genes significativos`)),
vjust = -0.3) +
theme_minimal() +
theme(
axis.line = ggplot2::element_line(
linewidth = 0.5,
colour = "black"),
axis.ticks = ggplot2::element_line(
linewidth = 0.5,
colour = "black"),
plot.title = ggplot2::element_text(
# size = (sizeLetra + 8),
hjust = 0.5),
# axis.title = ggplot2::element_text(
#   size = (sizeLetra + 4)),
# axis.text = ggplot2::element_text(
#   size = (sizeLetra + 2)),
axis.text.x = ggplot2::element_text(
angle = anguloX, hjust = 1, vjust = 1),
# text = element_text(
#   family = "Calibri",
#   size = sizeLetra),
legend.position = "none") +
ylab("% genes significativos") +
xlab("") +
ylim(0, 2) +
ggtitle(tipo))
}, simplify = F, USE.NAMES = T)
gridExtra::grid.arrange(grobs = graficos, ncol = 3, nrow = 4)
shiny::runApp('C:/Users/julia/Documents/GitHub/Normalization/app')
runApp('C:/Users/julia/Documents/GitHub/Normalization/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/Normalization/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
shiny::runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
runApp('C:/Users/julia/Documents/GitHub/pubmedtocsv/app')
# Setup ####
rm(list=ls())
graphics.off()
setwd("C:/Users/julia/Documents/GitHub/pubmedtocsv")
library(dplyr)
dfLabel <- readRDS(file = "PubMedIDs.rds")
source(file = "app/global.R")
# Main function from global ####
## Tranform data ####
lineas <- readLines("ejemploRNA.txt")
df <- processFile(lineas)
# Journal (JT)
length(table(df$JT))
# Journal (JT)
unique(df$YEAR)
# Journal (JT)
unique(df$JT)
table(df$JT)
table(df$JT) == 1
names(table(df$JT)[table(df$JT) == 1])
table(table(df$JT) == 1])
table(table(df$JT) == 1)
table(table(df$JT) == 20])
table(table(df$JT) == 20)
table(table(df$JT) == 20)["TRUE"]
unname(table(table(df$JT) == 20)["TRUE"])
unname(table(table(df$JT) == 1)["TRUE"])
table(df$JT)
unname(table(df$JT))
mean(unname(table(df$JT)))
median(totalByJournal)
totalByJournal <- unname(table(df$JT))
median(totalByJournal)
percent_rank(totalByJournal)
quantile(totalByJournal)
quantile(totalByJournal)["25%"]
runApp('app')
unique(df$JT)
length(unique(df$JT))
runApp('app')
runApp('app')
dfPlot <- data.frame(Years = names(table(df$YEAR)),
Frequency = as.vector(table(df$YEAR)),
Percentage = round(as.vector(prop.table(table(df$YEAR)))*100, 2))
min(dfPlot$Years)
seq(min(dfPlot$Years), max(dfPlot$Years), 1000)
seq(from = min(dfPlot$Years), to = max(dfPlot$Years), by =100)
max(dfPlot$Years)
seq(from = min(dfPlot$Years), to = max(dfPlot$Years), by =11)
seq(from = min(dfPlot$Years), to = max(dfPlot$Years), by =1)
runApp('app')
runApp('app')
View(df)
substr(df$DP, 1, 4)
substr(df$DP, 1, 4) == df$YEAR
as.numeric(substr(df$DP, 1, 4))
as.numeric(substr(c(df$DP, NA), 1, 4))
runApp('app')
shiny::runApp('app')
knitr::include_graphics(path = "Data/ImageReadme.png")
knitr::include_graphics(path = "images/UIStructure.png")
knitr::include_graphics(path = "images/SelectionPanel.png")
knitr::include_graphics(path = "images/TopRightPanel.png")
knitr::include_graphics(path = "images/BottomRightPanel.png")
knitr::include_graphics(path = "images/BottomRightPanel_Country.png")
knitr::include_graphics(path = "images/BottomRightPanel_C.png")
tab <- readRDS(file = "app/PubMedIDs.rds")
View(tab)
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Bfrt", scrollY = F,
scrollX = F, pageLength = nrow(df),
columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy", text = "Copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
js <- c(
"function(row, data, num, index){",
"  var $row = $(row);",
"  if($row.hasClass('even')){",
"    $row.css('background-color', 'white');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', 'white');",
"     }",
"    );",
"  }else{",
"    $row.css('background-color', '#EDFDFA');",
"    $row.hover(function(){",
"      $(this).css('background-color', 'lightgrey');",
"     }, function(){",
"      $(this).css('background-color', '#EDFDFA');",
"     }",
"    );",
"  }",
"}"
)
DT::datatable(df, extensions = "Buttons", rownames = F, escape = F,
options = list(ordering = F, dom = "Bfrt", scrollY = F,
scrollX = F, pageLength = nrow(df),
columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy", text = "Copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(df, extensions = "Buttons", rownames = T, escape = F,
options = list(ordering = T, dom = "Bfrt", scrollY = F,
scrollX = F, pageLength = nrow(df),
columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy", text = "Copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
DT::datatable(df, extensions = "Buttons", rownames = T, escape = F,
options = list(ordering = T, dom = "Bfrt", scrollY = F,
scrollX = F, pageLength = nrow(df),
# columnDefs = list(list(className = 'dt-center', targets = '_all')),
full_width = TRUE, rowCallback = DT::JS(js),
buttons = list(list(extend = "copy", text = "Copy"),
list(extend = "csv"),
list(extend = "excel")))) %>%
DT::formatStyle(1, font = 'bold')
knitr::include_graphics(path = "images/PubMedFormatReadme.png")
# ![Data/PubMedFormatReadme.png]()
knitr::kable(df, align = "c")
knitr::kable(df, align = "c", format = "html")
knitr::kable(df, align = c("C", "R"), format = "html")
knitr::kable(df, align = c("c", "r"), format = "html")
knitr::kable(df, align = c("l", "l"), format = "html")
rownames(df) <- 1:nrow(df)
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
rownames(df) <- 1:nrow(df)
knitr::kable(df, align = c("l", "l"), format = "html")
kable_styling(x_html, "striped", position = "center", font_size = 7)
kableExtra::kable_styling(x_html, "striped", position = "center", font_size = 7)
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
rownames(df) <- 1:nrow(df)
knitr::kable(df, align = c("l", "l"), format = "html")
kableExtra::kable_styling(x_html, "striped", position = "center", font_size = 7)
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
rownames(df) <- 1:nrow(df)
knitr::kable(df, align = c("l", "l"), format = "html")
kableExtra::kable_styling(df, "striped", position = "center", font_size = 7)
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
rownames(df) <- 1:nrow(df)
kHTML <- knitr::kable(df, align = c("l", "l"), format = "html")
kableExtra::kable_styling(kHTML, "striped", position = "center", font_size = 7)
kableExtra::kable_styling(kHTML, "striped", position = "center")
df <- readRDS(file = "app/PubMedIDs.rds")
df <- df[,-3]
rownames(df) <- 1:nrow(df)
kHTML <- knitr::kable(df, align = c("l", "l"), format = "html")
kableExtra::kable_styling(kHTML, "striped", position = "center", full_width = T)
kHTML <- knitr::kable(df, align = c("l", "l"))
kableExtra::kable_styling(kHTML, "striped", position = "center", full_width = T)
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
library(stringr)
# Functions
dfLabel <- readRDS("PubMedIDs.rds")
setwd("C:/Users/julia/Documents/GitHub/pubmedtocsv/app")
# Libraries
library(dplyr)
library(shiny)
library(shinycustomloader)
library(bslib)
library(DT)
library(plotly)
library(Hmisc)
library(ggplot2)
library(stringr)
# Functions
dfLabel <- readRDS("PubMedIDs.rds")
pubmedTagsAll <- dfLabel$ID
extract_id <- function(x, type) {
pattern <- paste0("([^;\\[]+) \\[", type, "\\]")
res <- str_match(x, pattern)[,2]
if (!is.null(res)) res <- str_squish(res)
res
}
# Función para combinar dos columnas con limpieza previa
combine_ids <- function(primary, secondary) {
p <- str_squish(primary)
s <- str_squish(secondary)
ifelse(
is.na(p) & !is.na(s), s,
ifelse(!is.na(p) & is.na(s), p,
ifelse(!is.na(p) & !is.na(s) & p != s,
paste(p, s, sep = "; "),
p))
)
}
processFile <- function(lineas){
# 1) Detect key for each line
is_field <- grepl("^([A-Z]{2,4})\\s*-\\s*", lineas)
field <- ifelse(is_field, sub("^([A-Z]{2,4})\\s*-\\s*(.*)", "\\1", lineas), NA)
value <- ifelse(is_field, sub("^([A-Z]{2,4})\\s*-\\s*(.*)", "\\2", lineas), lineas)
field <- zoo::na.locf(field, na.rm = FALSE)
# Merging lines of the same field
dfTab <- data.frame(field = field, value = value, stringsAsFactors = FALSE)
# Grouping by article ID
dfTab$ID <- cumsum(dfTab$field == "PMID")
# 2) Final structure
df <- dfTab %>%
group_by(ID, field) %>%
summarise(
value = ifelse(
field[1] %in% c("AU", "AUID", "LID", "AID", "OT", "RN", "PHST", "FAU", "IS"),
stringr::str_squish((paste(value, collapse = "; "))),
stringr::str_squish((paste(value, collapse = " ")))
),
.groups = "drop"
) %>%
# summarise(value = stringr::str_squish(paste(value, collapse = " ")), .groups = "drop") %>%
tidyr::pivot_wider(names_from = field, values_from = value)
# 3) Extract DOI and PPI from LID and AID
DOI_LID <- extract_id(df$LID, "doi")
PII_LID <- extract_id(df$LID, "pii")
DOI_AID <- extract_id(df$AID, "doi")
PII_AID <- extract_id(df$AID, "pii")
# Combine info
df$DOI <- combine_ids(DOI_LID, DOI_AID)
df$PII <- combine_ids(PII_LID, PII_AID)
# 4) Improve Aesthetics
## 4.1) Labels
for (i in colnames(df)){
if (i %in% dfLabel$ID){
Hmisc::label(df[,i, drop = TRUE]) <- dfLabel[dfLabel$ID == i, "Description"]
}
}
## 4.2) Data
if (any("DP" %in% colnames(df))){
# Change colnames for the meaning (or using labels)
df$YEAR <- as.numeric(substr(df$DP, 1, 4))
Hmisc::label(df$YEAR) <- "Year of publication"
} else if (any("CRDT" %in% colnames(df))){
# Change colnames for the meaning (or using labels)
df$YEAR <- as.numeric(format(strptime(df$CRDT, format = "%Y/%m/%d %H:%M"),"%Y"))
Hmisc::label(df$YEAR) <- "Year of publication"
} else if (any("EDAT" %in% colnames(df))){
# Change colnames for the meaning (or using labels)
df$YEAR <- as.numeric(format(strptime(df$EDAT, format = "%Y/%m/%d %H:%M"),"%Y"))
Hmisc::label(df$YEAR) <- "Year of publication"
} else if (any("DEP" %in% colnames(df))){
df$YEAR <- as.numeric(format(as.Date(df$DEP, format = "%Y/%m/%d"),"%Y"))
Hmisc::label(df$YEAR) <- "Year of electronic publication"
}
# 5) Returning
df <- df %>% dplyr::select(
dplyr::any_of(c("ID", "PMID", "TI", "AU", "JT", "JID",
"DP", "YEAR", "DOI", "PL", "AB")),
dplyr::everything())
return(df)
}
colorPalette <- function(gradiente = FALSE, show = FALSE,
n = NULL, removeWhite = TRUE) {
# colores
# paletaDisc <- c(
#   "#003C72", "#005B9A", "#1786A3", "#2FB2AD", "#C3E5BC", "#BCD8E5",
#   "#9389C7", "#D1BCE5", "#C67DD8", "#CBCBCB"
# )
paletaDisc <- c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", #"#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E", "#EE8A58", "#E96824", "#81340D"
)
gradientePal0 <- grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", #"#2CB8B1", "#89E3DF",
"white",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
# gradientePal0 <- grDevices::colorRampPalette(colors = c(
#   "#003C72", "#005B9A", "#1786A3",
#   "#2FB2AD", "#BCD8E5", "white",
#   "white", "#D1BCE5", "#C67DD8",
#   "#9389C7", "#544797", "#2E2753"
# ))
if (removeWhite){
gradientePal0 <-  grDevices::colorRampPalette(colors = c(
"#0F2537", "#3B4D5B", "#4A5A67", "#8699A8", "#B8C3CC", #"#BCD8E5", # "#2CB8B1", "#89E3DF",
"#F4B494" ,"#F2A57E","#EE8A58", "#E96824", "#81340D"
))
}
gradientePal <- gradientePal0(200)
# Opciones de salida
if (show) {
# Enseñar graficos únicamente si show es TRUE
par(mfrow = c(2, 1))
plot(rep(1, length(paletaDisc)),
col = paletaDisc, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta discreta", xaxt = "n"
)
plot(rep(1, 200),
col = gradientePal, pch = 15, cex = 10, ylab = "",
yaxt = "n", frame.plot = FALSE, xlab = "Paleta en gradiente", xaxt = "n"
)
par(mfrow = c(1, 1))
} else if (!show) {
# si show es FALSE, no se enseñan los gráficos y se evalúa el parámetro n
if (is.null(n)) {
##### si no hay n, se devuelve la paleta completa, gradiente o discreta según lo indicado
if (!gradiente) {
return(paletaDisc)
} else if (gradiente) {
return(gradientePal)
}
} else if (!is.null(n) & is.numeric(n)) {
##### si hay n, se devuelven tantos colores como n indicado
if (n == 1) {
cores <- "#E96824"
} else if (n == 2) {
cores <- paletaDisc[c(1, 4)]
} else if (n == 3) {
cores <- paletaDisc[c(1, 3, 4)]
} else if (n == 4) {
cores <- paletaDisc[c(1, 3, 4, 7)]
} else if (n == 5 & n < length(paletaDisc)) {
cores <- paletaDisc[c(1, 3, 4, 7, 9)]
} else if (n <= length(paletaDisc)) { # Hasta aquí paleta discreta
cores <- paletaDisc[1:n]
} else if (n > length(paletaDisc)) { # Paleta en gradiente
cores <- gradientePal0(n)
}
return(cores)
} else {
stop("Ha habido algún error.")
}
}
}
rm(list=ls())
graphics.off()
